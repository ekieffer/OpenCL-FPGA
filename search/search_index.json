{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What are FPGAs ? \u00b6 FPGAs, or Field Programmable Gate Arrays, are a type of digital integrated circuit that can be reprogrammed to perform a wide variety of tasks. Unlike processors that execute pre-defined operations based on software instructions, an FPGA's functionality is defined by a hardware description language (HDL) and can be reconfigured as needed, essentially changing the hardware operation of the FPGA itself. FPGAs are made up of programmable logic blocks and a hierarchy of reconfigurable interconnects that allow the blocks to be \"wired together\" to perform complex combinational functions, or simply as simple logic gates like AND, OR, XOR, and NOT. Some FPGAs also have memory elements, including flip-flops and more complete blocks of memory. Key characteristics of FPGAs include: Flexibility : They can be programmed to perform almost any digital function. Reprogrammability : The same FPGA can be used in a different application or with a different functionality by simply reprogramming it. Performance : FPGAs can often perform a task more quickly than a traditional processor or microcontroller because they can execute many operations concurrently. Parallelism : Due to their architecture, they can process multiple inputs and outputs simultaneously. Long lifecycle : Once an FPGA is configured, it will continue to perform that function indefinitely. This is advantageous in certain applications where hardware needs to be reliable and long-lasting. FPGAs are widely used in many applications including digital signal processing, software-defined radio, aerospace & defense systems, medical imaging, computer vision, speech recognition, cryptography, bioinformatics, computer hardware emulation, and prototyping for ASIC (Application-specific integrated circuit) designs. FPGA programming with OpenCL \u00b6 OpenCL for FPGAs is a technology that enables programmers to harness the power of field-programmable gate arrays (FPGAs) using the OpenCL programming model. OpenCL, which stands for Open Computing Language, is an open standard framework for parallel programming across a wide range of heterogeneous computing devices, including CPUs, GPUs, and FPGAs. FPGAs are highly customizable hardware devices that can be programmed to perform specific tasks with significantly better performance and power efficiency compared to traditional CPUs and GPUs for certain workloads. However, programming FPGAs traditionally required specialized hardware description languages (HDLs) like VHDL or Verilog, which have a steeper learning curve and require FPGA-specific knowledge. OpenCL for FPGAs simplifies FPGA programming by allowing developers to write their applications in a high-level programming language (C-like syntax) and target FPGA devices. The OpenCL programming model abstracts the hardware details and enables the development of applications that can seamlessly execute on different platforms, including FPGAs. The key components of OpenCL for FPGAs include: Host Code : This is the part of the application that runs on the CPU or a separate host device. It manages data transfer between the host and the FPGA device and controls the execution of OpenCL kernels on the FPGA. OpenCL Kernels : These are the functions written in OpenCL C that execute on the FPGA. Kernels are designed to perform highly parallel tasks and are mapped onto the FPGA fabric for efficient hardware acceleration. FPGA Device : This refers to the FPGA hardware that is targeted by the OpenCL application. The FPGA must have an OpenCL-capable runtime and driver installed to execute OpenCL kernels. FPGA Runtime and Compiler : The FPGA runtime and compiler are responsible for converting the high-level OpenCL code into low-level hardware descriptions that can be implemented on the FPGA device. By using OpenCL for FPGAs, developers can take advantage of the performance benefits of FPGA hardware without delving into the complexities of low-level FPGA programming languages. It opens up FPGA development to a broader range of developers and allows them to leverage the parallel processing capabilities of FPGAs for tasks such as image processing, data analytics, cryptography, and other computationally intensive workloads. Intel\u00ae FPGA SDK for OpenCL \u00b6 This course focuses on the Intel\u00ae FPGA SDK for OpenCL which is a suite of development tools that allow developers to write programs using OpenCL (Open Computing Language) and execute them on Intel FPGAs (Field Programmable Gate Arrays). OpenCL is a framework for writing programs that execute across heterogeneous platforms including CPUs, GPUs, DSPs, and FPGAs. The SDK includes an optimizing compiler, runtime libraries, development boards, and reference designs. Developers write code in a high-level language and the SDK compiler then optimizes the design for performance, power, and resource utilization before generating a custom FPGA configuration. FPGA and Supercomputing \u00b6 FPGA cards for High-Performance Computing (HPC) are specialized hardware accelerators that plug into computer servers to enhance their processing capabilities. Unlike traditional CPUs, FPGAs are highly customizable, allowing them to be tailored to specific tasks, thereby offering higher performance and lower power consumption for certain workloads. During this course, we will stringly rely on the National Supercomputer. Meluxina is a supercomputer located in Luxembourg, which began operation in 2021. It is part of the European High-Performance Computing (EuroHPC) Joint Undertaking, an initiative by the European Union to develop a world-class supercomputing ecosystem in Europe. The Meluxina supercomputer is hosted by LuxProvide , the national HPC organization in Luxembourg. Its computing power is intended to be used for a wide range of tasks, such as data visualization, artificial intelligence, and simulating complex systems, serving both academic researchers and industry. The machine's architecture includes CPUs, GPUs and FPGAs. It is designed to be energy-efficient, utilizing technologies to reduce power consumption and lower its environmental footprint. Meluxina's FPGA nodes have two 2 Intel Stratix 10MX 16 GB FPGA cards. The FPGA partition contains 20 nodes. Course: \u00b6 Module: Accelerator Programming, Semester 3 ECTS: 3 Objective: Discovering hardware programming through field-programmable gate array (FPGA)","title":"Course description"},{"location":"#what-are-fpgas","text":"FPGAs, or Field Programmable Gate Arrays, are a type of digital integrated circuit that can be reprogrammed to perform a wide variety of tasks. Unlike processors that execute pre-defined operations based on software instructions, an FPGA's functionality is defined by a hardware description language (HDL) and can be reconfigured as needed, essentially changing the hardware operation of the FPGA itself. FPGAs are made up of programmable logic blocks and a hierarchy of reconfigurable interconnects that allow the blocks to be \"wired together\" to perform complex combinational functions, or simply as simple logic gates like AND, OR, XOR, and NOT. Some FPGAs also have memory elements, including flip-flops and more complete blocks of memory. Key characteristics of FPGAs include: Flexibility : They can be programmed to perform almost any digital function. Reprogrammability : The same FPGA can be used in a different application or with a different functionality by simply reprogramming it. Performance : FPGAs can often perform a task more quickly than a traditional processor or microcontroller because they can execute many operations concurrently. Parallelism : Due to their architecture, they can process multiple inputs and outputs simultaneously. Long lifecycle : Once an FPGA is configured, it will continue to perform that function indefinitely. This is advantageous in certain applications where hardware needs to be reliable and long-lasting. FPGAs are widely used in many applications including digital signal processing, software-defined radio, aerospace & defense systems, medical imaging, computer vision, speech recognition, cryptography, bioinformatics, computer hardware emulation, and prototyping for ASIC (Application-specific integrated circuit) designs.","title":"What are FPGAs ?"},{"location":"#fpga-programming-with-opencl","text":"OpenCL for FPGAs is a technology that enables programmers to harness the power of field-programmable gate arrays (FPGAs) using the OpenCL programming model. OpenCL, which stands for Open Computing Language, is an open standard framework for parallel programming across a wide range of heterogeneous computing devices, including CPUs, GPUs, and FPGAs. FPGAs are highly customizable hardware devices that can be programmed to perform specific tasks with significantly better performance and power efficiency compared to traditional CPUs and GPUs for certain workloads. However, programming FPGAs traditionally required specialized hardware description languages (HDLs) like VHDL or Verilog, which have a steeper learning curve and require FPGA-specific knowledge. OpenCL for FPGAs simplifies FPGA programming by allowing developers to write their applications in a high-level programming language (C-like syntax) and target FPGA devices. The OpenCL programming model abstracts the hardware details and enables the development of applications that can seamlessly execute on different platforms, including FPGAs. The key components of OpenCL for FPGAs include: Host Code : This is the part of the application that runs on the CPU or a separate host device. It manages data transfer between the host and the FPGA device and controls the execution of OpenCL kernels on the FPGA. OpenCL Kernels : These are the functions written in OpenCL C that execute on the FPGA. Kernels are designed to perform highly parallel tasks and are mapped onto the FPGA fabric for efficient hardware acceleration. FPGA Device : This refers to the FPGA hardware that is targeted by the OpenCL application. The FPGA must have an OpenCL-capable runtime and driver installed to execute OpenCL kernels. FPGA Runtime and Compiler : The FPGA runtime and compiler are responsible for converting the high-level OpenCL code into low-level hardware descriptions that can be implemented on the FPGA device. By using OpenCL for FPGAs, developers can take advantage of the performance benefits of FPGA hardware without delving into the complexities of low-level FPGA programming languages. It opens up FPGA development to a broader range of developers and allows them to leverage the parallel processing capabilities of FPGAs for tasks such as image processing, data analytics, cryptography, and other computationally intensive workloads.","title":"FPGA programming with OpenCL"},{"location":"#intel-fpga-sdk-for-opencl","text":"This course focuses on the Intel\u00ae FPGA SDK for OpenCL which is a suite of development tools that allow developers to write programs using OpenCL (Open Computing Language) and execute them on Intel FPGAs (Field Programmable Gate Arrays). OpenCL is a framework for writing programs that execute across heterogeneous platforms including CPUs, GPUs, DSPs, and FPGAs. The SDK includes an optimizing compiler, runtime libraries, development boards, and reference designs. Developers write code in a high-level language and the SDK compiler then optimizes the design for performance, power, and resource utilization before generating a custom FPGA configuration.","title":"Intel\u00ae FPGA SDK for OpenCL"},{"location":"#fpga-and-supercomputing","text":"FPGA cards for High-Performance Computing (HPC) are specialized hardware accelerators that plug into computer servers to enhance their processing capabilities. Unlike traditional CPUs, FPGAs are highly customizable, allowing them to be tailored to specific tasks, thereby offering higher performance and lower power consumption for certain workloads. During this course, we will stringly rely on the National Supercomputer. Meluxina is a supercomputer located in Luxembourg, which began operation in 2021. It is part of the European High-Performance Computing (EuroHPC) Joint Undertaking, an initiative by the European Union to develop a world-class supercomputing ecosystem in Europe. The Meluxina supercomputer is hosted by LuxProvide , the national HPC organization in Luxembourg. Its computing power is intended to be used for a wide range of tasks, such as data visualization, artificial intelligence, and simulating complex systems, serving both academic researchers and industry. The machine's architecture includes CPUs, GPUs and FPGAs. It is designed to be energy-efficient, utilizing technologies to reduce power consumption and lower its environmental footprint. Meluxina's FPGA nodes have two 2 Intel Stratix 10MX 16 GB FPGA cards. The FPGA partition contains 20 nodes.","title":"FPGA and Supercomputing"},{"location":"#course","text":"Module: Accelerator Programming, Semester 3 ECTS: 3 Objective: Discovering hardware programming through field-programmable gate array (FPGA)","title":"Course:"},{"location":"chan_pip/","text":"Communication using channels and pipes \u00b6","title":"Channels & pipes"},{"location":"chan_pip/#communication-using-channels-and-pipes","text":"","title":"Communication using channels and pipes"},{"location":"intro/","text":"Introduction to OpenCL for FPGA \u00b6","title":"Introduction"},{"location":"intro/#introduction-to-opencl-for-fpga","text":"","title":"Introduction to OpenCL for FPGA"},{"location":"kernels/","text":"Running and writing OpenCL kernels \u00b6","title":"OpenCL kernels"},{"location":"kernels/#running-and-writing-opencl-kernels","text":"","title":"Running and writing OpenCL kernels"},{"location":"opt/","text":"Kernel optimization: impoving NDRange and Single-work items \u00b6","title":"Kernel optimization"},{"location":"opt/#kernel-optimization-impoving-ndrange-and-single-work-items","text":"","title":"Kernel optimization: impoving NDRange and Single-work items"},{"location":"references/","text":"References \u00b6 Intel\u00ae FPGA SDK for OpenCL\u2122 Pro Edition: Getting Started Guide Intel\u00ae FPGA SDK for OpenCL\u2122 Pro Edition: Programming Guide Intel\u00ae FPGA SDK for OpenCL\u2122 Pro Edition: Best Practices Guide","title":"References"},{"location":"references/#references","text":"Intel\u00ae FPGA SDK for OpenCL\u2122 Pro Edition: Getting Started Guide Intel\u00ae FPGA SDK for OpenCL\u2122 Pro Edition: Programming Guide Intel\u00ae FPGA SDK for OpenCL\u2122 Pro Edition: Best Practices Guide","title":"References"},{"location":"rep_pro/","text":"Reporting and profiling OpenCL kernels \u00b6","title":"Reporting & Profiling"},{"location":"rep_pro/#reporting-and-profiling-opencl-kernels","text":"","title":"Reporting and profiling OpenCL kernels"},{"location":"setup/","text":"","title":"Setup"}]}